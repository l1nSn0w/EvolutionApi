// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_CONNECTION_URI")
}

enum InstanceConnectionStatus {
  open
  close
  connecting
}

enum DeviceMessage {
  ios
  android
  web
  unknown
  desktop
}

enum TypebotSessionStatus {
  open
  closed
  paused
}

enum TriggerType {
  all
  keyword
}

enum TriggerOperator {
  contains
  equals
  startsWith
  endsWith
}

model Instance {
  id               String                   @id @default(cuid())
  name             String                   @unique @db.VarChar(255)
  connectionStatus InstanceConnectionStatus @default(open)
  ownerJid         String?                  @db.VarChar(100)
  profileName      String?                  @db.VarChar(100)
  profilePicUrl    String?                  @db.VarChar(500)
  integration      String?                  @db.VarChar(100)
  number           String?                  @db.VarChar(100)
  token            String?                  @unique @db.VarChar(255)
  clientName       String?                  @db.VarChar(100)
  createdAt        DateTime?                @default(now()) @db.Timestamp
  updatedAt        DateTime?                @updatedAt @db.Timestamp
  Chat             Chat[]
  Contact          Contact[]
  Message          Message[]
  Webhook          Webhook?
  Chatwoot         Chatwoot?
  Label            Label[]
  Proxy            Proxy?
  Setting          Setting?
  Rabbitmq         Rabbitmq?
  Sqs              Sqs?
  Websocket        Websocket?
  Typebot          Typebot[]
  Session          Session?
  MessageUpdate    MessageUpdate[]
  TypebotSession   TypebotSession[]
  TypebotSetting   TypebotSetting?
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  creds     String?  @db.Text
  createdAt DateTime @default(now())
  Instance  Instance @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Chat {
  id         String    @id @default(cuid())
  remoteJid  String    @db.VarChar(100)
  labels     Json?     @db.Json
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime? @updatedAt @db.Date
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
}

model Contact {
  id            String    @id @default(cuid())
  remoteJid     String    @db.VarChar(100)
  pushName      String?   @db.VarChar(100)
  profilePicUrl String?   @db.VarChar(500)
  createdAt     DateTime? @default(now()) @db.Date
  updatedAt     DateTime? @updatedAt @db.Date
  Instance      Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId    String
}

model Message {
  id                           String          @id @default(cuid())
  key                          Json            @db.Json
  pushName                     String?         @db.VarChar(100)
  participant                  String?         @db.VarChar(100)
  messageType                  String          @db.VarChar(100)
  message                      Json            @db.Json
  contextInfo                  Json?           @db.Json
  source                       DeviceMessage
  messageTimestamp             String          @db.VarChar(100)
  chatwootMessageId            Int?            @db.Int
  chatwootInboxId              Int?            @db.Int
  chatwootConversationId       Int?            @db.Int
  chatwootContactInboxSourceId String?         @db.VarChar(100)
  chatwootIsRead               Boolean?
  Instance                     Instance        @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId                   String
  typebotSessionId             String?
  MessageUpdate                MessageUpdate[]
  TypebotSession               TypebotSession? @relation(fields: [typebotSessionId], references: [id])
}

model MessageUpdate {
  id          String   @id @default(cuid())
  keyId       String   @db.VarChar(100)
  remoteJid   String   @db.VarChar(100)
  fromMe      Boolean
  participant String?  @db.VarChar(100)
  dateTime    DateTime @db.Date
  pollUpdates Json?    @db.Json
  status      String   @db.VarChar(30)
  Message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  Instance    Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId  String
}

model Webhook {
  id              String    @id @default(cuid())
  url             String    @db.VarChar(500)
  enabled         Boolean?  @default(false)
  events          Json?     @db.Json
  webhookByEvents Boolean?  @default(false)
  webhookBase64   Boolean?  @default(false)
  createdAt       DateTime? @default(now()) @db.Date
  updatedAt       DateTime  @updatedAt @db.Date
  Instance        Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String    @unique
}

model Chatwoot {
  id                      String    @id @default(cuid())
  enabled                 Boolean?  @default(true)
  accountId               String?   @db.VarChar(100)
  token                   String?   @db.VarChar(100)
  url                     String?   @db.VarChar(500)
  nameInbox               String?   @db.VarChar(100)
  signMsg                 Boolean?  @default(false)
  signDelimiter           String?   @db.VarChar(100)
  number                  String?   @db.VarChar(100)
  reopenConversation      Boolean?  @default(false)
  conversationPending     Boolean?  @default(false)
  mergeBrazilContacts     Boolean?  @default(false)
  importContacts          Boolean?  @default(false)
  importMessages          Boolean?  @default(false)
  daysLimitImportMessages Int?      @db.Int
  organization            String?   @db.VarChar(100)
  logoUrl                 String?   @db.VarChar(500)
  createdAt               DateTime? @default(now()) @db.Date
  updatedAt               DateTime  @updatedAt @db.Date
  Instance                Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId              String    @unique
}

model Label {
  id           String    @id @default(cuid())
  labelId      String?   @unique @db.VarChar(100)
  name         String    @db.VarChar(100)
  color        String    @db.VarChar(100)
  predefinedId String?   @db.VarChar(100)
  createdAt    DateTime? @default(now()) @db.Date
  updatedAt    DateTime  @updatedAt @db.Date
  Instance     Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId   String
}

model Proxy {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false)
  host       String    @db.VarChar(100)
  port       String    @db.VarChar(100)
  protocol   String    @db.VarChar(100)
  username   String    @db.VarChar(100)
  password   String    @db.VarChar(100)
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime  @updatedAt @db.Date
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Setting {
  id              String    @id @default(cuid())
  rejectCall      Boolean   @default(false)
  msgCall         String?   @db.VarChar(100)
  groupsIgnore    Boolean   @default(false)
  alwaysOnline    Boolean   @default(false)
  readMessages    Boolean   @default(false)
  readStatus      Boolean   @default(false)
  syncFullHistory Boolean   @default(false)
  createdAt       DateTime? @default(now()) @db.Date
  updatedAt       DateTime  @updatedAt @db.Date
  Instance        Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String    @unique
}

model Rabbitmq {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false)
  events     Json      @db.Json
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime  @updatedAt @db.Date
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Sqs {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false)
  events     Json      @db.Json
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime  @updatedAt @db.Date
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Websocket {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false)
  events     Json      @db.Json
  createdAt  DateTime? @default(now()) @db.Date
  updatedAt  DateTime  @updatedAt @db.Date
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Typebot {
  id              String           @id @default(cuid())
  enabled         Boolean          @default(true)
  url             String           @db.VarChar(500)
  typebot         String           @db.VarChar(100)
  expire          Int?             @default(0) @db.Int
  keywordFinish   String?          @db.VarChar(100)
  delayMessage    Int?             @db.Int
  unknownMessage  String?          @db.VarChar(100)
  listeningFromMe Boolean?         @default(false)
  stopBotFromMe   Boolean?         @default(false)
  keepOpen        Boolean?         @default(false)
  debounceTime    Int?             @db.Int
  createdAt       DateTime?        @default(now()) @db.Date
  updatedAt       DateTime?        @updatedAt @db.Date
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?
  Instance        Instance         @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String
  sessions        TypebotSession[]
}

model TypebotSession {
  id                 String    @id @default(cuid())
  remoteJid          String    @db.VarChar(100)
  pushName           String?   @db.VarChar(100)
  sessionId          String    @db.VarChar(100)
  status             String    @db.VarChar(100)
  prefilledVariables Json?     @db.Json
  debounceTime       Int?      @db.Int
  createdAt          DateTime? @default(now()) @db.Date
  updatedAt          DateTime  @updatedAt @db.Date
  Typebot            Typebot   @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  typebotId          String
  Message            Message[]
  Instance           Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId         String
}

model TypebotSetting {
  id              String    @id @default(cuid())
  expire          Int?      @default(0) @db.Int
  keywordFinish   String?   @db.VarChar(100)
  delayMessage    Int?      @db.Int
  unknownMessage  String?   @db.VarChar(100)
  listeningFromMe Boolean?  @default(false)
  stopBotFromMe   Boolean?  @default(false)
  keepOpen        Boolean?  @default(false)
  createdAt       DateTime? @default(now()) @db.Date
  updatedAt       DateTime  @updatedAt @db.Date
  Instance        Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String    @unique
}
